@isTest
global class FOConstituentBasicEditContTest {
	
    @isTest static void SaveIND() {
        Case c = new Case();
        c.ConstituentId__c = 'test';
        c.ConstituentType__c = 'INDIVIDUAL';
        insert c;    
        ConstituentInformation__c ci = new ConstituentInformation__c();
        ci.ConstituentID__c = 'test';
        ci.CaseID__c = c.Id;
        insert ci;
        //relConsId = ApexPages.currentPage().getParameters().get('relConsId');
        //relConsType = ApexPages.currentPage().getParameters().get('relConsType');

        C360Settings__c setting = new C360Settings__c();
        setting.Name = 'Master';
        setting.C360SettingsURL__c = 'dummy';
        insert setting;

        Test.startTest();
        PageReference pageRef = Page.FOConstituentBasicEdit;
        Test.setCurrentPage(pageRef);
        Test.setMock(WebServiceMock.class, new FOConstituentBasicEditContMock());
        ApexPages.currentPage().getParameters().put('id', c.id);

        FOConstituentBasicEditController cac = new FOConstituentBasicEditController(new ApexPages.StandardController(c));

        cac.cancel();
        cac.save();
        cac.getIsIndiv();


        cac.getItems();
        cac.getTitles();
        cac.getSuffixes();
        cac.changeCons();

        cac.save();

        cac.firstName = 'test';
        cac.lastName = 'test';

        cac.save();

        Test.stopTest();
    }

    @isTest static void SaveHOUSE() {
        Case c = new Case();
        c.ConstituentId__c = 'test';
        c.ConstituentType__c = 'HOUSEHOLD';
        insert c;    
        //relConsId = ApexPages.currentPage().getParameters().get('relConsId');
        //relConsType = ApexPages.currentPage().getParameters().get('relConsType');

        C360Settings__c setting = new C360Settings__c();
        setting.Name = 'Master';
        setting.C360SettingsURL__c = 'dummy';
        insert setting;

        Test.startTest();
        PageReference pageRef = Page.FOConstituentBasicEdit;
        Test.setCurrentPage(pageRef);
        Test.setMock(WebServiceMock.class, new FOConstituentBasicEditContMock());
        ApexPages.currentPage().getParameters().put('id', c.id);

        FOConstituentBasicEditController cac = new FOConstituentBasicEditController(new ApexPages.StandardController(c));

        cac.save();
        cac.name = 'test';

        cac.save();

        Test.stopTest();
    }

    @isTest static void SaveORG() {
        Case c = new Case();
        c.ConstituentId__c = 'test';
        c.ConstituentType__c = 'ORGANIZATION';
        insert c;    
        //relConsId = ApexPages.currentPage().getParameters().get('relConsId');
        //relConsType = ApexPages.currentPage().getParameters().get('relConsType');

        C360Settings__c setting = new C360Settings__c();
        setting.Name = 'Master';
        setting.C360SettingsURL__c = 'dummy';
        insert setting;

        Test.startTest();
        PageReference pageRef = Page.FOConstituentBasicEdit;
        Test.setCurrentPage(pageRef);
        Test.setMock(WebServiceMock.class, new FOConstituentBasicEditContMock());
        ApexPages.currentPage().getParameters().put('id', c.id);

        FOConstituentBasicEditController cac = new FOConstituentBasicEditController(new ApexPages.StandardController(c));

        cac.name = 'test';

        cac.save();

        Test.stopTest();
    }

    global class FOConstituentBasicEditContMock implements WebServiceMock {
        global void doInvoke(
            Object stub,
            Object request,
            Map<String, Object> response,
            String endpoint,
            String soapAction,
            String requestName,
            String responseNS,
            String responseName,
            String responseType) {

            // Create response element from the autogenerated class.
            // Populate response element.
            // Add response element to the response parameter, as follows:
            if (requestName == 'DataRequest') {
                soapStjudeOrg.DataResponse_element de = new soapStjudeOrg.DataResponse_element();
                objectSoapStjudeOrg.Attribute att = new objectSoapStjudeOrg.Attribute();

                att.Desc_x = 'xyz';
                att.ID = 'abc';
                att.Name = 'name';

                objectSoapStjudeOrg.Attribute[] atts = new objectSoapStjudeOrg.Attribute[] 
                { att };

                de.Result = atts;
                response.put('response_x', de);
            }
            else if(requestName == 'GetConstituentRequest') {
                soapStjudeOrg.GetConstituentResponse_element gcre = new soapStjudeOrg.GetConstituentResponse_element();
                gcre.Constituent = new domainSoapStjudeOrg.Constituent();
                gcre.Constituent.ConstituentId = 'notaguid';
                response.put('response_x', gcre); 
            }
            else if(requestName == 'EditConstituentRequest') {
                soapStjudeOrg.EditConstituentResponse_element ecre = new soapStjudeOrg.EditConstituentResponse_element();
                ecre.Result = 'Result';
                response.put('response_x', ecre); 
            }
            else {
                soapStjudeOrg.CreateConstituentResponse_element ccre = new soapStjudeOrg.CreateConstituentResponse_element();
                ccre.CreatedConstituent = new domainSoapStjudeOrg.Constituent();
                ccre.CreatedConstituent.ConstituentId = 'notaguid';
                response.put('response_x', ccre); 
            }
        }
    }
}