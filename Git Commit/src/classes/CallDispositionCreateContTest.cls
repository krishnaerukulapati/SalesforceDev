@isTest
global class CallDispositionCreateContTest {
	
	@isTest static void test_method_one() {
		// Implement test code
	}

	@isTest static void testChangeDispoType(){
		Lead c = new Lead();
			c.LastName = 'test';
        	c.ConstituentID__c = 'notaquid';
        	c.Constituent_Type__c = 'INDIVIDUAL';
        	c.Company = 'fake';
        	insert c;

		Test.startTest();
		
		PageReference pageRef = Page.CallDispositionCreate;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('id', c.id);

        CallDispositionCreateController dispC = new CallDispositionCreateController();

        dispC.dispositionValue = 'something';
        dispC.changeDispoType();
        System.assertEquals('', dispC.dispositionValue, 'changeDispoType did not alter dispositionValue');
		Test.stopTest();
	}

	@isTest static void testValidate(){

		Lead c = new Lead();
		c.LastName = 'test';
        c.ConstituentID__c = 'notaquid';
        c.Constituent_Type__c = 'INDIVIDUAL';
        c.Company = 'fake';
        insert c;

		Test.startTest();
		
		PageReference pageRef = Page.CallDispositionCreate;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('id', c.id);

        CallDispositionCreateController dispC = new CallDispositionCreateController();

        dispC.dispositionType = null;
        dispC.validateForm();
        System.assertEquals(false, dispC.validateForm(), 'validForm did not catch null');
		Test.stopTest();
	}

	@isTest static void testSave(){

		Lead c = new Lead();
		c.LastName = 'test';
        c.ConstituentID__c = 'notaquid';
        c.Constituent_Type__c = 'INDIVIDUAL';
        c.Company = 'fake';
        insert c;

		Test.startTest();
		
		PageReference pageRef = Page.CallDispositionCreate;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('id', c.id);

        CallDispositionCreateController dispC = new CallDispositionCreateController();

        //dispC.callDate = '08/04/2016';
        ECCUtil.consInfo ci = new ECCUtil.consInfo();
        String consId = '15151515';
        dispC.dispositionType = 'test';
        dispC.save(ci, consId);

		Test.stopTest();
	}

	@isTest static void testConcateTaskDispo(){

		Lead c = new Lead();
		c.LastName = 'test';
        c.ConstituentID__c = 'notaquid';
        c.Constituent_Type__c = 'INDIVIDUAL';
        c.Company = 'fake';
        insert c;

		Test.startTest();
		
		PageReference pageRef = Page.DIYFitnessHighlights;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('id', c.id);

        DispositionController dispC = new DispositionController();
        String dispoType = 'No';
        String dispoVal = 'Illness';
        String test1 = dispC.concateTaskDispo(dispoType, dispoVal);
        System.assertEquals('No - Illness', test1, 'concateTaskDispo did not concate properly');
        String test2 = dispC.concateTaskDispo(dispoType, null);

		Test.stopTest();
	}


	@isTest static void testAsCase(){
        Case c = new Case();
        c.ConstituentID__c = 'notaquid';
        c.ConstituentType__c = 'INDIVIDUAL';
        insert c;

		Test.startTest();
		
		PageReference pageRef = Page.CallDispositionCreate;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('id', c.id);

        CallDispositionCreateController dispC = new CallDispositionCreateController();

		Test.stopTest();
	}

	@isTest static void testGatherInfoForSave(){
		Lead c = new Lead();
			c.LastName = 'test';
        	c.ConstituentID__c = 'notaquid';
        	c.Constituent_Type__c = 'INDIVIDUAL';
        	c.Company = 'fake';
        	insert c;

        C360Settings__c setting = new C360Settings__c();
        	setting.Name = 'Master';
        	setting.C360SettingsURL__c = 'dummy';
        insert setting;

		Test.startTest();
		
		PageReference pageRef = Page.CallDispositionCreate;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('id', c.id);

        CallDispositionCreateController dispC = new CallDispositionCreateController();

        Test.setMock(WebServiceMock.class, new CallDispositionCreateContMock());

        dispC.gatherInfoForSave();
		Test.stopTest();	
	}

	global class CallDispositionCreateContMock implements WebServiceMock {
        global void doInvoke(
            Object stub,
            Object request,
            Map<String, Object> response,
            String endpoint,
            String soapAction,
            String requestName,
            String responseNS,
            String responseName,
            String responseType) {

            // Create response element from the autogenerated class.
            // Populate response element.
            // Add response element to the response parameter, as follows:
            if (requestName == 'GetTransactionsRequest') {
                soapStjudeOrg.GetTransactionsResponse_element de = new soapStjudeOrg.GetTransactionsResponse_element();
                de.TotalResults = 50;

                response.put('response_x', de);
            }
            else if(requestName == 'GetConstituentRequest') {
                soapStjudeOrg.GetConstituentResponse_element gcre = new soapStjudeOrg.GetConstituentResponse_element();
                gcre.Constituent = new domainSoapStjudeOrg.Constituent();
                gcre.Constituent.ConstituentId = 'notaguid';
                gcre.Constituent.firstName = 'test';
                gcre.Constituent.lastName = 'test';
                gcre.Constituent.Title = new domainSoapStjudeOrg.TypeAttribute();
                gcre.Constituent.Title.Code = 'test';
                gcre.Constituent.Profile = new domainSoapStjudeOrg.Profile();
                domainSoapStjudeOrg.Phone ph = new domainSoapStjudeOrg.Phone();
                ph.ContactID = 'doesnt';
                ph.PhoneNumber = '1231231234';
                ph.PhoneType = new domainSoapStjudeOrg.TypeAttribute();
                gcre.Constituent.Profile.Phones = new domainSoapStjudeOrg.Phone[] { ph };

                domainSoapStjudeOrg.Email email = new domainSoapStjudeOrg.Email();
                email.EmailAddress = 'test@test.com';
                email.EmailType = new domainSoapStjudeOrg.TypeAttribute();
                gcre.Constituent.Profile.Emails = new domainSoapStjudeOrg.Email[] { email };

                domainSoapStjudeOrg.Address addr = new domainSoapStjudeOrg.Address();
                addr.street1 = 'test';
                addr.AddressType = new domainSoapStjudeOrg.TypeAttribute();
                gcre.Constituent.Profile.Addresses = new domainSoapStjudeOrg.Address[] { addr };

                domainSoapStjudeOrg.Property p = new domainSoapStjudeOrg.Property();
                p.Property = 'VIP_YES';
                gcre.Constituent.Properties = new domainSoapStjudeOrg.Property[] { p };

                domainSoapStjudeOrg.Preference pref = new domainSoapStjudeOrg.Preference();
                gcre.Constituent.Preferences = new domainSoapStjudeOrg.Preference[] {pref};

                domainSoapStjudeOrg.Interaction i = new domainSoapStjudeOrg.Interaction();
                gcre.Constituent.Interactions = new domainSoapStjudeOrg.Interaction[] {i};

                domainSoapStjudeOrg.Staff stf = new domainSoapStjudeOrg.Staff();
                stf.Name = 'blah';
                gcre.Constituent.Staff = stf;

                domainSoapStjudeOrg.TypeAttribute typ = new domainSoapStjudeOrg.TypeAttribute();
                typ.Code = 'Individual';
                gcre.Constituent.Type_x = typ;

                gcre.Constituent.Profile.FinancialProfile = new domainSoapStjudeOrg.FinancialProfile();

                domainSoapStjudeOrg.Transaction_x trans = new domainSoapStjudeOrg.Transaction_x();
                trans.FinancialTransactionId = 'numbers';
                gcre.Constituent.Transactions = new domainSoapStjudeOrg.Transaction_x[] {trans};

                response.put('response_x', gcre); 
            }
            else {
                soapStjudeOrg.CreateConstituentResponse_element ccre = new soapStjudeOrg.CreateConstituentResponse_element();
                ccre.CreatedConstituent = new domainSoapStjudeOrg.Constituent();
                ccre.CreatedConstituent.ConstituentId = 'notaguid';
                
                response.put('response_x', ccre); 
            }
        }
    }
	
}