@isTest
global class OppHistoryContTest {
	@isTest static void testOppHIstoryOrg() {
        String id = setup();

        Test.startTest();
        Test.setMock(WebServiceMock.class, new OppHistoryMock());
        PageReference pageRef = Page.OppHistory;
        Test.setCurrentPage(pageRef);

        ApexPages.currentPage().getParameters().put('id', id);

        OppHistoryController ccac = new OppHistoryController();

        ccac.nextPage();
        ccac.prevPage();
        ccac.getOppHist();
	
		Test.stopTest();
	}

	@isTest static void testOppHIstoryCoord() {
        String id = setup();

        Test.startTest();
        Test.setMock(WebServiceMock.class, new OppHistoryMock());
        PageReference pageRef = Page.OppHistory;
        Test.setCurrentPage(pageRef);

        ApexPages.currentPage().getParameters().put('id', id);
        ApexPages.currentPage().getParameters().put('leadRelType', 'COORDINATOR');

       	OppHistoryController ccac = new OppHistoryController();

        ccac.nextPage();
        ccac.prevPage();
        ccac.getOppHist();
	
		Test.stopTest();
	}

	@isTest static void testOppHIstoryCase() {
        String id = setupCase();
        setup();

        Test.startTest();
        Test.setMock(WebServiceMock.class, new OppHistoryMock());
        PageReference pageRef = Page.OppHistory;
        Test.setCurrentPage(pageRef);

        ApexPages.currentPage().getParameters().put('id', id);

        OppHistoryController ccac = new OppHistoryController();

        ccac.nextPage();
        ccac.prevPage();
        ccac.getOppHist();
	
		Test.stopTest();
	}

	private static String setup() {
		String id = '';
		Lead c = new Lead();
        c.ConstituentID__c = 'notaquidorg1';
        c.Coordinator__c = 'notatguidcoord1';
        c.LastNAme = 'test lead 1';
        c.Company = 'ALSAC';
        insert c;

        id = c.id;

        c = new Lead();
        c.ConstituentID__c = 'notaquidorg1';
        c.Coordinator__c = 'notatguidcoord1';
        c.LastNAme = 'test lead 2';
        c.Company = 'ALSAC';
        insert c;

        Account a = new Account(
        	Name = 'Test Account'
        );

        insert a;

        Opportunity o = new Opportunity(
        	Event_Organizer__c = c.Id
        	, Name = 'Test Opportunity'
        	, AccountId = a.Id
        	, StageName = 'BAD Record'
        	, CloseDate = Date.Today()
        );

        insert o;

		C360Settings__c setting = new C360Settings__c();
        setting.Name = 'Master';
        setting.C360SettingsURL__c = 'dummy';
        insert setting;

        return id;
	}

	private static String setupCase() {
		Case c = new Case();
        c.ConstituentID__c = 'notaquidorg1';
        c.ConstituentType__c = 'INDIVIDUAL';
        c.ConstituentUUID__c = 'notaguid';
        insert c;

        return c.Id;
	}

    global class OppHistoryMock implements WebServiceMock {
        global void doInvoke(
            Object stub,
            Object request,
            Map<String, Object> response,
            String endpoint,
            String soapAction,
            String requestName,
            String responseNS,
            String responseName,
            String responseType) {
            system.debug('\n\n requestName @@@@@@@@@@@@@@@@: ' + requestName);    
            // Create response element from the autogenerated class.
            // Populate response element.
            // Add response element to the response parameter, as follows:
            if(requestName == 'GetConstituentXRefsRequest') {
                soapStjudeOrg.GetConstituentXRefsResponse_element gcre = new soapStjudeOrg.GetConstituentXRefsResponse_element();
                gcre.Constituent360XRef = new  domainSoapStjudeOrg.Constituent360XRef();
                domainSoapStjudeOrg.Constituent con = new domainSoapStjudeOrg.Constituent();
                con.ConstituentId = 'test';

                gcre.Constituent360XRef.Constituents = new domainSoapStjudeOrg.Constituent[] {con};

                response.put('response_x', gcre); 
            }
            else if (requestName == 'CreateInteractionRequest') {
                soapStjudeOrg.CreateInteractionResponse_element cire = new soapStjudeOrg.CreateInteractionResponse_element();
                cire.Result = 'result';

                response.put('response_x', cire);
            }
            else if(requestName == 'GetPreferencesRequest') {
                soapStjudeOrg.GetPreferencesResponse_element ecre = new soapStjudeOrg.GetPreferencesResponse_element();
                domainSoapStjudeOrg.Preference p = new domainSoapStjudeOrg.Preference();
                p.ConstituentPreferenceID = 'doesnt';
                ecre.Preferences = new domainSoapStjudeOrg.Preference[] { p };
                response.put('response_x', ecre); 
            }
            else if(requestName == 'EditPreferenceRequest') {
                soapStjudeOrg.EditPreferenceResponse_element ecre = new soapStjudeOrg.EditPreferenceResponse_element();
                ecre.Result = 'Result';
                response.put('response_x', ecre); 
            }
            else if(requestName == 'CreatePreferenceRequest') {
                soapStjudeOrg.CreatePreferenceResponse_element ecre = new soapStjudeOrg.CreatePreferenceResponse_element();
                ecre.Result = 'Result';
                response.put('response_x', ecre); 
            }else if(requestName == 'GetConstituentRequest'){
                
                soapStjudeOrg.GetConstituentResponse_element getConst = new soapStjudeOrg.GetConstituentResponse_element();
                getConst.Constituent = new domainSoapStjudeOrg.Constituent();
                domainSoapStjudeOrg.TypeAttribute type_x = new domainSoapStjudeOrg.TypeAttribute();
                type_x.code='code';
                getConst.Constituent.type_x = type_x;
                getConst.Constituent.uuid='uuid';
                response.put('response_x', getConst);
            }
        }
    }
}